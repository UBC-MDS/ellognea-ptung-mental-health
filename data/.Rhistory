library(DBI)
library (nycflights13)
flights.db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(flights.db, "airports", airports)
dbWriteTable(flights.db, "planes", planes)
dbWriteTable(flights.db, "flights", flights)
dbListTables(flights.db)
dbDisconnect(flights.db)
library(tidyverse)
library (RSQLite)
library(dplyr)
#Retrieve all flights where the arrival time was delayed by more than 30 minutes. Summarize the delays by producing an appropriate figure, in a way that highlights the differences between airports (consider only airports that had more than 2500 flights delayed more than 30 min).
myflights <- data %>%
filter(ArrDelay>30) %>%
arrange (FlightNum,ArrDelay,Dest) %>%
group_by (Dest) %>%
summarize(count= n()) %>%
filter (n>2500) %>%
arrange(desc(count))
#Retrieve all flights where the arrival time was delayed by more than 30 minutes. Summarize the delays by producing an appropriate figure, in a way that highlights the differences between airports (consider only airports that had more than 2500 flights delayed more than 30 min).
myflights <- data %>%
filter(ArrDelay>30) %>%
arrange (FlightNum,ArrDelay,Dest) %>%
group_by (Dest) %>%
summarize(count= n()) %>%
filter (count>2500) %>%
arrange(desc(count))
#Retrieve all flights where the arrival time was delayed by more than 30 minutes. Summarize the delays by producing an appropriate figure, in a way that highlights the differences between airports (consider only airports that had more than 2500 flights delayed more than 30 min).
myflights <- data %>%
filter(ArrDelay>30) %>%
arrange (FlightNum,ArrDelay,Dest) %>%
group_by (Dest) %>%
summarize(counts= n()) %>%
filter (counts>2500) %>%
arrange(desc(counts))
#Retrieve all flights where the arrival time was delayed by more than 30 minutes. Summarize the delays by producing an appropriate figure, in a way that highlights the differences between airports (consider only airports that had more than 2500 flights delayed more than 30 min).
myflights <- data %>%
filter(ArrDelay>30) %>%
arrange (FlightNum,ArrDelay,Dest) %>%
group_by (Dest) %>%
summarize(total_count= n()) %>%
filter (total_count>2500) %>%
arrange(desc(total_count))
#Retrieve all flights where the arrival time was delayed by more than 30 minutes. Summarize the delays by producing an appropriate figure, in a way that highlights the differences between airports (consider only airports that had more than 2500 flights delayed more than 30 min).
myflights <- data %>%
filter(ArrDelay>30) %>%
arrange (FlightNum,ArrDelay,Dest) %>%
group_by (Dest) %>%
summarize(n= n()) %>%
filter (n>2500) %>%
arrange(desc(n))
# Report the 10 busiest airports in terms of the number of departure flights.
data %>%
arrange (Origin) %>%
group_by(Origin) %>%
summarize (n=n()) %>%
arrange(desc(n))
con= dbConnect(SQLite(), "flightsdata.db")
data <- tbl(con,"flights")
head(data)
# Report the 10 busiest airports in terms of the number of departure flights.
data %>%
arrange (Origin) %>%
group_by(Origin) %>%
summarize (n=n()) %>%
arrange(desc(n))
# The 10 busiest airports in terms of the number of departure flights are ATL, ORD, DFW, DEN, LAX, PHX, IAH, LAS,DTW and SFO
#Retrieve all flights where the arrival time was delayed by more than 30 minutes. Summarize the delays by producing an appropriate figure, in a way that highlights the differences between airports (consider only airports that had more than 2500 flights delayed more than 30 min).
myflights <- data %>%
filter(ArrDelay>30) %>%
arrange (FlightNum,ArrDelay,Dest) %>%
group_by (Dest) %>%
summarize(count= n()) %>%
filter (count>2500) %>%
arrange(desc(count))
head(myflights)
# Plot
ggplot(myflights, aes(count,fct_reorder(Dest,count))) + geom_point() + theme_bw() + theme(plot.title = element_text(hjust=0.5, size=12),axis.text.x = element_text(angle = 90, hjust = 1 )) + labs (x= "Airports", y= " Number of flights", title= "Number of flights delayed by more than 30 minutes per airport")
# The top 3 airports with the highest number of flghts delayed by more than 30 minutes are: ORD, ATL,EWR
# Plot
ggplot(myflights, aes(count,fct_reorder(Dest,count))) + geom_point() + theme_bw() + theme(plot.title = element_text(hjust=0.5, size=12),axis.text.y = element_text(angle = 90, hjust = 1 )) + labs (x= "Airports", y= " Number of flights", title= "Number of flights delayed by more than 30 minutes per airport")
# The top 3 airports with the highest number of flghts delayed by more than 30 minutes are: ORD, ATL,EWR
# Plot
ggplot(myflights, aes(count,fct_reorder(Dest,count))) + geom_point() + theme_bw() + labs (x= "Airports", y= " Number of flights", title= "Number of flights delayed by more than 30 minutes per airport")
# The top 3 airports with the highest number of flghts delayed by more than 30 minutes are: ORD, ATL,EWR
# Plot
ggplot(myflights, aes(count,fct_reorder(Dest,count))) + geom_point() + theme_bw() + labs (x= "Airports", y= " Number of flights", title= "Number of flights delayed by more than 30 minutes per airport")
# The top 3 airports with the highest number of flghts delayed by more than 30 minutes are: ORD, ATL,EWR
install.packages("rmarkdown")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
library(RSQLite)
my_con = dbConnect(SQLite(), "drinks.db")
install.packages("car")
knitr::opts_chunk$set(echo = FALSE, errors=FALSE, message=FALSE)
ggplot(data=data2, aes(x=Delivery_fee, y=Bill,fill=Store, width=0.6)) +
geom_bar(position="dodge", stat="identity")+ ggtitle('Total bill with and without delivery fee') + scale_fill_manual(values = alpha(c("darkolivegreen3","forestgreen","darkseagreen")))+ theme_bw() +theme(plot.title = element_text(hjust=0.5))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ geom_text(aes(label = Bill), position = position_dodge(0.6),vjust = -0.3,size=3)
library(tidyverse)
data2 <- read_csv("lab4-data-2.csv")
ggplot(data=data2, aes(x=Delivery_fee, y=Bill,fill=Store, width=0.6)) +
geom_bar(position="dodge", stat="identity")+ ggtitle('Total bill with and without delivery fee') + scale_fill_manual(values = alpha(c("darkolivegreen3","forestgreen","darkseagreen")))+ theme_bw() +theme(plot.title = element_text(hjust=0.5))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(axis.text.x = element_text(angle = 90, hjust = 1))+ geom_text(aes(label = Bill), position = position_dodge(0.6),vjust = -0.3,size=3)
knitr::opts_chunk$set(echo = FALSE, errors=FALSE, message=FALSE)
library(kableExtra)
table <- data.frame(
Store=c("Save-On-Foods", "SuperStore","Walmart","Whole Foods Market", "Safeway","IGA","Stongs Market","Thrifty foods","Choices market", "No frills", "Your independent grocers"), "Online Store"=c("Yes","Yes","Yes", "No (order might be sent by phone or email)", "No (items should be chosen in store)", "No (items should be chosen in store)","Yes", "Yes","Yes","Yes","Yes"), "Delivery services"=c("Yes","Yes","Yes","Yes","Yes","Yes","Yes ($50 minimum order)", "Yes ($50 minimum order)", "Yes (2-3 days)","No", "No"), "Delivery fees"=c(9.95,7.99,10.97,10,10,10,10.99,7.95,10,"NA","NA"))
kable(table) %>%
kable_styling(bootstrap_options = c("striped","bordered",font_size = 11)) %>%
row_spec(row=1:3, bold = T, color = "white", background = "black") %>%
row_spec(row=4:11, bold = T, color = "black")
library(tidyverse)
raw_data <- read_csv("lab4-data.csv")
ggplot(data=raw_data, aes(x=Items, y=Price,fill=Store, width=0.75)) +
geom_bar(position="dodge", stat="identity")+ ggtitle('Food item prices per online store') + scale_fill_manual(values = alpha(c("darkorange3", "tan1","saddlebrown")))+ theme_bw() +theme(plot.title = element_text(hjust=0.5))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+theme(axis.text.x = element_text(angle = 90, hjust = 1)) +theme(text = element_text(size=15))
ggplot(data=raw_data, aes(x=Store, y=Price,fill=Items, width=0.5)) +
geom_col(col=1)+ ggtitle('Food item prices per online store') + scale_fill_manual(values = alpha(c("burlywood", "blanchedalmond", "gray87","gold","darkslategray1","greenyellow","indianred","lightsalmon")))+ theme_bw() +theme(plot.title = element_text(hjust=0.5))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ geom_text(aes(label = Price), position = position_stack(vjust = 0.5),size=4) +theme(text = element_text(size=15))
library(tidyverse)
data2 <- read_csv("pres-data3.csv")
ggplot(data=data2, aes(x=Fee, y=Bill,fill=Store, width=0.6)) +
geom_bar(position="dodge", stat="identity")+ ggtitle('Total bill with and without delivery fee') + scale_fill_manual(values = alpha(c("darkolivegreen3","forestgreen","darkseagreen")))+ theme_bw() +theme(plot.title = element_text(hjust=0.5,vjust=3,size=16))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ geom_text(aes(label = Bill), position = position_dodge(0.6),vjust = -0.3,size=4)+theme(text = element_text(size=15))
library(tidyverse)
data2 <- read_csv("pres-data3.csv")
ggplot(data=data2, aes(x=Fee, y=Bill,fill=Store, width=0.6)) +
geom_bar(position="dodge", stat="identity")+ ggtitle('Total bill with and without delivery fee') + scale_fill_manual(values = alpha(c("darkolivegreen3","forestgreen","darkseagreen")))+ theme_bw() +theme(plot.title = element_text(hjust=0.5,vjust=3,size=16))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+ geom_text(aes(label = Bill), position = position_dodge(0.6),vjust = -0.3,size=4)+theme(text = element_text(size=15)) + labs(y="Total bill", x="")
x = 1L
for (i in 1:31) {
x = x * 2L
}
x = 1L
for (i in 1:30) {
x = x * 2L
}
print(x)
x=1L
print(x)
for (i in 1:30) print i
for (i in 1:30) print (i)
runApp()
shiny::runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
install.packages(shinytheme)
install.packages("shinythemes")
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
shiny::runApp('ellognea-ptung-mental-health')
install.packages("rscconnect")
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
shiny::runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
shiny::runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
runApp('ellognea-ptung-mental-health')
shiny::runApp('ellognea-ptung-mental-health')
setwd("~/ellognea-ptung-mental-health")
shiny::runApp()
runApp()
data <- read_csv("data/clean/data_clean.csv")
data2 <- data %>% select(age_group,Gender,family_history,obs_consequence, treatment) %>%
gather(variable,value,-treatment) %>%
group_by(variable, value,treatment) %>%
summarize(Response=n())
View(data2)
runApp()
# age group
clean_data$age_group <- cut(clean_data$Age, breaks=c(18, 30, 40, 50, 60, 80), right = FALSE, labels = c("18-30","31-40","41-50","51-60","61-80"))
# export csv
write.csv(clean_data, file = "../data/clean/data_clean.csv")
setwd("~/ellognea-ptung-mental-health")
library(tidyverse)
# read raw data
data <- read.csv("../data/raw/data_raw.csv")
setwd("~/ellognea-ptung-mental-health/data")
library(tidyverse)
# read raw data
data <- read.csv("../data/raw/data_raw.csv")
# filter data
clean_data <- data %>%
select("Age","Gender","Country","family_history","work_interfere","treatment","remote_work","benefits","seek_help","obs_consequence") %>%
filter(Age>17 & Age<80)
# drop na
clean_data <- na.omit(clean_data)
# sex
clean_data <- clean_data %>% mutate(Gender = ifelse(Gender %in% c("Female", "female", "F", "f", "FEMALE"), "Female",
ifelse(Gender %in% c("Male", "male","M","m","MALE","Mail", "maile", "Mal"), "Male", "Other")))
# age group
clean_data$age_group <- cut(clean_data$Age, breaks=c(18, 30, 40, 50, 60, 80), right = FALSE, labels = c("18-30","31-40","41-50","51-60","61-80"))
# export csv
write.csv(clean_data, file = "../data/clean/data_clean.csv")
# export csv
write.csv(clean_data, file = "data/clean/data_clean.csv")
setwd("~/ellognea-ptung-mental-health/data")
library(tidyverse)
# read raw data
data <- read.csv("data/raw/data_raw.csv")
# filter data
clean_data <- data %>%
select("Age","Gender","Country","family_history","work_interfere","treatment","remote_work","benefits","seek_help","obs_consequence") %>%
filter(Age>17 & Age<80)
